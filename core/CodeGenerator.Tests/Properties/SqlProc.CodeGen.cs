// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SqlProcBinder CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Threading.Tasks;

namespace Sql
{
    public class GenerateInt
    {
        public struct Result
        {
            public DrInt Rowset;
        }

        public static async Task<Result> ExecuteAsync(SqlProcBinder.IDbContext dc, int count)
        {
            var ctx = dc.CreateCommand();
            var cmd = (SqlCommand)ctx.Command;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "GenerateInt";
            cmd.Parameters.AddWithValue("@count", count);
            ctx.OnExecuting();
            var reader = await cmd.ExecuteReaderAsync();
            var r = new Result();
            r.Rowset = new DrInt(reader);
            ctx.OnExecuted();
            return r;
        }
    }

    public class SumInt
    {
        public struct Result
        {
            public int AffectedRowCount;
            public int answer;
        }

        public static async Task<Result> ExecuteAsync(SqlProcBinder.IDbContext dc, int value1, int value2)
        {
            var ctx = dc.CreateCommand();
            var cmd = (SqlCommand)ctx.Command;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "SumInt";
            cmd.Parameters.AddWithValue("@value1", value1);
            cmd.Parameters.AddWithValue("@value2", value2);
            var p2 = cmd.Parameters.AddWithValue("@answer", 0);
            p2.Direction = ParameterDirection.Output;
            ctx.OnExecuting();
            var rowCount = await cmd.ExecuteNonQueryAsync();
            var r = new Result();
            r.AffectedRowCount = rowCount;
            r.answer = (p2.Value is DBNull) ? 0 : (int)p2.Value;
            ctx.OnExecuted();
            return r;
        }
    }

    public class DrInt : IDisposable
    {
        private DbDataReader _reader;

        public DrInt(DbDataReader reader)
        {
            _reader = reader;
        }

        public class Row
        {
            public int Value;
        }

        public async Task<Row> NextAsync()
        {
            if (await _reader.ReadAsync() == false) return null;
            var r = new Row();
            r.Value = _reader.GetInt32(0);
            return r;
        }

        public async Task<List<T>> FetchAllRowsAndDisposeAsync<T>(Func<Row, T> selector)
        {
            var rows = new List<T>();
            while (true)
            {
                var row = await NextAsync();
                if (row == null) break;
                rows.Add(selector(row));
            }
            Dispose();
            return rows;
        }

        public void Dispose()
        {
            _reader.Dispose();
        }
    }
}
