// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SqlProcBinder CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Threading.Tasks;
using SqlProcBinder;

namespace Sql
{
    public class EchoParameters
    {
        public struct Result
        {
            public int AffectedRowCount;
            public bool o_bit;
            public byte o_tinyint;
            public short o_smallint;
            public int o_int;
            public long o_bigint;
            public float o_real;
            public double o_float;
            public Decimal o_money;
            public Decimal o_decimal;
            public DateTime o_smalldatetime;
            public DateTime o_date;
            public DateTime o_datetime;
            public DateTimeOffset o_datetimeoffset;
            public TimeSpan o_time;
            public string o_nchar;
            public string o_nvarchar;
            public byte[] o_binary;
            public byte[] o_varbinary;
            public Guid o_uniqueidentifier;
        }

        public static async Task<Result> ExecuteAsync(IDbContext dc, bool i_bit, byte i_tinyint, short i_smallint, int i_int, long i_bigint, float i_real, double i_float, Decimal i_money, Decimal i_decimal, DateTime i_smalldatetime, DateTime i_date, DateTime i_datetime, DateTimeOffset i_datetimeoffset, TimeSpan i_time, string i_nchar, string i_nvarchar, byte[] i_binary, byte[] i_varbinary, Guid i_uniqueidentifier)
        {
            var ctx = dc.CreateCommand();
            var cmd = ctx.Command;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "EchoParameters";
            cmd.AddParameter("@i_bit", i_bit);
            cmd.AddParameter("@i_tinyint", i_tinyint);
            cmd.AddParameter("@i_smallint", i_smallint);
            cmd.AddParameter("@i_int", i_int);
            cmd.AddParameter("@i_bigint", i_bigint);
            cmd.AddParameter("@i_real", i_real);
            cmd.AddParameter("@i_float", i_float);
            cmd.AddParameter("@i_money", i_money);
            cmd.AddParameter("@i_decimal", i_decimal);
            cmd.AddParameter("@i_smalldatetime", i_smalldatetime);
            cmd.AddParameter("@i_date", i_date);
            cmd.AddParameter("@i_datetime", i_datetime);
            cmd.AddParameter("@i_datetimeoffset", i_datetimeoffset);
            cmd.AddParameter("@i_time", i_time);
            cmd.AddParameter("@i_nchar", i_nchar);
            cmd.AddParameter("@i_nvarchar", i_nvarchar);
            cmd.AddParameter("@i_binary", i_binary);
            cmd.AddParameter("@i_varbinary", i_varbinary);
            cmd.AddParameter("@i_uniqueidentifier", i_uniqueidentifier);
            var p19 = cmd.AddParameter("@o_bit", false, ParameterDirection.Output);
            var p20 = cmd.AddParameter("@o_tinyint", (byte)0, ParameterDirection.Output);
            var p21 = cmd.AddParameter("@o_smallint", (short)0, ParameterDirection.Output);
            var p22 = cmd.AddParameter("@o_int", 0, ParameterDirection.Output);
            var p23 = cmd.AddParameter("@o_bigint", 0L, ParameterDirection.Output);
            var p24 = cmd.AddParameter("@o_real", 0f, ParameterDirection.Output);
            var p25 = cmd.AddParameter("@o_float", 0.0, ParameterDirection.Output);
            var p26 = cmd.AddParameter("@o_money", 0M, ParameterDirection.Output);
            var p27 = cmd.AddParameter("@o_decimal", 0M, ParameterDirection.Output);
            var p28 = cmd.AddParameter("@o_smalldatetime", DateTime.MinValue, ParameterDirection.Output);
            var p29 = cmd.AddParameter("@o_date", DateTime.MinValue, ParameterDirection.Output);
            var p30 = cmd.AddParameter("@o_datetime", DateTime.MinValue, ParameterDirection.Output);
            var p31 = cmd.AddParameter("@o_datetimeoffset", DateTimeOffset.MinValue, ParameterDirection.Output);
            var p32 = cmd.AddParameter("@o_time", TimeSpan.Zero, ParameterDirection.Output);
            var p33 = cmd.AddParameter("@o_nchar", string.Empty, ParameterDirection.Output, 4);
            var p34 = cmd.AddParameter("@o_nvarchar", string.Empty, ParameterDirection.Output, 4);
            var p35 = cmd.AddParameter("@o_binary", new byte[0], ParameterDirection.Output, 4);
            var p36 = cmd.AddParameter("@o_varbinary", new byte[0], ParameterDirection.Output, 4);
            var p37 = cmd.AddParameter("@o_uniqueidentifier", Guid.Empty, ParameterDirection.Output);
            ctx.OnExecuting();
            var rowCount = await cmd.ExecuteNonQueryAsync();
            var r = new Result();
            r.AffectedRowCount = rowCount;
            r.o_bit = (p19.Value is DBNull) ? false : (bool)p19.Value;
            r.o_tinyint = (p20.Value is DBNull) ? (byte)0 : (byte)p20.Value;
            r.o_smallint = (p21.Value is DBNull) ? (short)0 : (short)p21.Value;
            r.o_int = (p22.Value is DBNull) ? 0 : (int)p22.Value;
            r.o_bigint = (p23.Value is DBNull) ? 0L : (long)p23.Value;
            r.o_real = (p24.Value is DBNull) ? 0f : (float)p24.Value;
            r.o_float = (p25.Value is DBNull) ? 0.0 : (double)p25.Value;
            r.o_money = (p26.Value is DBNull) ? 0M : (Decimal)p26.Value;
            r.o_decimal = (p27.Value is DBNull) ? 0M : (Decimal)p27.Value;
            r.o_smalldatetime = (p28.Value is DBNull) ? DateTime.MinValue : (DateTime)p28.Value;
            r.o_date = (p29.Value is DBNull) ? DateTime.MinValue : (DateTime)p29.Value;
            r.o_datetime = (p30.Value is DBNull) ? DateTime.MinValue : (DateTime)p30.Value;
            r.o_datetimeoffset = (p31.Value is DBNull) ? DateTimeOffset.MinValue : (DateTimeOffset)p31.Value;
            r.o_time = (p32.Value is DBNull) ? TimeSpan.Zero : (TimeSpan)p32.Value;
            r.o_nchar = (p33.Value is DBNull) ? null : (string)p33.Value;
            r.o_nvarchar = (p34.Value is DBNull) ? null : (string)p34.Value;
            r.o_binary = (p35.Value is DBNull) ? null : (byte[])p35.Value;
            r.o_varbinary = (p36.Value is DBNull) ? null : (byte[])p36.Value;
            r.o_uniqueidentifier = (p37.Value is DBNull) ? Guid.Empty : (Guid)p37.Value;
            ctx.OnExecuted();
            return r;
        }
    }

    public class EchoParametersAsRowset
    {
        public struct Result
        {
            public DrEcho Rowset;
        }

        public static async Task<Result> ExecuteAsync(IDbContext dc, bool i_bit, byte i_tinyint, short i_smallint, int i_int, long i_bigint, float i_real, double i_float, Decimal i_money, Decimal i_decimal, DateTime i_smalldatetime, DateTime i_date, DateTime i_datetime, DateTimeOffset i_datetimeoffset, TimeSpan i_time, string i_nchar, string i_nvarchar, byte[] i_binary, byte[] i_varbinary, Guid i_uniqueidentifier)
        {
            var ctx = dc.CreateCommand();
            var cmd = ctx.Command;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "EchoParametersAsRowset";
            cmd.AddParameter("@i_bit", i_bit);
            cmd.AddParameter("@i_tinyint", i_tinyint);
            cmd.AddParameter("@i_smallint", i_smallint);
            cmd.AddParameter("@i_int", i_int);
            cmd.AddParameter("@i_bigint", i_bigint);
            cmd.AddParameter("@i_real", i_real);
            cmd.AddParameter("@i_float", i_float);
            cmd.AddParameter("@i_money", i_money);
            cmd.AddParameter("@i_decimal", i_decimal);
            cmd.AddParameter("@i_smalldatetime", i_smalldatetime);
            cmd.AddParameter("@i_date", i_date);
            cmd.AddParameter("@i_datetime", i_datetime);
            cmd.AddParameter("@i_datetimeoffset", i_datetimeoffset);
            cmd.AddParameter("@i_time", i_time);
            cmd.AddParameter("@i_nchar", i_nchar);
            cmd.AddParameter("@i_nvarchar", i_nvarchar);
            cmd.AddParameter("@i_binary", i_binary);
            cmd.AddParameter("@i_varbinary", i_varbinary);
            cmd.AddParameter("@i_uniqueidentifier", i_uniqueidentifier);
            ctx.OnExecuting();
            var reader = await cmd.ExecuteReaderAsync();
            var r = new Result();
            r.Rowset = new DrEcho(reader);
            ctx.OnExecuted();
            return r;
        }
    }

    public class GenerateInt
    {
        public struct Result
        {
            public DrInt Rowset;
        }

        public static async Task<Result> ExecuteAsync(IDbContext dc, int count)
        {
            var ctx = dc.CreateCommand();
            var cmd = ctx.Command;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "GenerateInt";
            cmd.AddParameter("@count", count);
            ctx.OnExecuting();
            var reader = await cmd.ExecuteReaderAsync();
            var r = new Result();
            r.Rowset = new DrInt(reader);
            ctx.OnExecuted();
            return r;
        }
    }

    public class GenerateIntByRowset
    {
        public struct Result
        {
            public DbDataReader Rowset;
        }

        public static async Task<Result> ExecuteAsync(IDbContext dc, int count)
        {
            var ctx = dc.CreateCommand();
            var cmd = ctx.Command;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "GenerateInt";
            cmd.AddParameter("@count", count);
            ctx.OnExecuting();
            var reader = await cmd.ExecuteReaderAsync();
            var r = new Result();
            r.Rowset = reader;
            ctx.OnExecuted();
            return r;
        }
    }

    public class GenerateIntWithOutput
    {
        public struct Result
        {
            public List<DrInt.Row> Rows;
            public string message;
        }

        public static async Task<Result> ExecuteAsync(IDbContext dc, int count)
        {
            var ctx = dc.CreateCommand();
            var cmd = ctx.Command;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "GenerateIntWithOutput";
            cmd.AddParameter("@count", count);
            var p1 = cmd.AddParameter("@message", string.Empty, ParameterDirection.Output, 100);
            ctx.OnExecuting();
            var reader = await cmd.ExecuteReaderAsync();
            var r = new Result();
            r.Rows = await (new DrInt(reader)).FetchAllRowsAndDisposeAsync();
            r.message = (p1.Value is DBNull) ? null : (string)p1.Value;
            ctx.OnExecuted();
            return r;
        }
    }

    public class RaiseError
    {
        public static async Task<int> ExecuteAsync(IDbContext dc, string message)
        {
            var ctx = dc.CreateCommand();
            var cmd = ctx.Command;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "RaiseError";
            cmd.AddParameter("@message", message);
            ctx.OnExecuting();
            var r = await cmd.ExecuteNonQueryAsync();
            ctx.OnExecuted();
            return r;
        }
    }

    public class SumInt
    {
        public struct Result
        {
            public int AffectedRowCount;
            public int answer;
        }

        public static async Task<Result> ExecuteAsync(IDbContext dc, int value1, int value2)
        {
            var ctx = dc.CreateCommand();
            var cmd = ctx.Command;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "SumInt";
            cmd.AddParameter("@value1", value1);
            cmd.AddParameter("@value2", value2);
            var p2 = cmd.AddParameter("@answer", 0, ParameterDirection.Output);
            ctx.OnExecuting();
            var rowCount = await cmd.ExecuteNonQueryAsync();
            var r = new Result();
            r.AffectedRowCount = rowCount;
            r.answer = (p2.Value is DBNull) ? 0 : (int)p2.Value;
            ctx.OnExecuted();
            return r;
        }
    }

    public class SumIntWithReturn
    {
        public struct Result
        {
            public int AffectedRowCount;
            public int Return;
            public int answer;
        }

        public static async Task<Result> ExecuteAsync(IDbContext dc, int value1, int value2)
        {
            var ctx = dc.CreateCommand();
            var cmd = ctx.Command;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "SumIntWithReturn";
            cmd.AddParameter("@value1", value1);
            cmd.AddParameter("@value2", value2);
            var p2 = cmd.AddParameter("@answer", 0, ParameterDirection.Output);
            var pr = cmd.AddParameter(null, null, ParameterDirection.ReturnValue);
            ctx.OnExecuting();
            var rowCount = await cmd.ExecuteNonQueryAsync();
            var r = new Result();
            r.AffectedRowCount = rowCount;
            r.answer = (p2.Value is DBNull) ? 0 : (int)p2.Value;
            r.Return = (int)pr.Value;
            ctx.OnExecuted();
            return r;
        }
    }

    public class DrEcho : IDisposable
    {
        private DbDataReader _reader;

        public DrEcho(DbDataReader reader)
        {
            _reader = reader;
        }

        public class Row
        {
            public bool o_bit;
            public byte o_tinyint;
            public short o_smallint;
            public int o_int;
            public long o_bigint;
            public float o_real;
            public double o_float;
            public Decimal o_money;
            public Decimal o_decimal;
            public DateTime o_smalldatetime;
            public DateTime o_date;
            public DateTime o_datetime;
            public DateTimeOffset o_datetimeoffset;
            public TimeSpan o_time;
            public string o_nchar;
            public string o_nvarchar;
            public byte[] o_binary;
            public byte[] o_varbinary;
            public Guid o_uniqueidentifier;
        }

        public async Task<Row> NextAsync()
        {
            if (await _reader.ReadAsync() == false) return null;
            var r = new Row();
            r.o_bit = (bool)_reader.GetValue(0);
            r.o_tinyint = (byte)_reader.GetValue(1);
            r.o_smallint = (short)_reader.GetValue(2);
            r.o_int = (int)_reader.GetValue(3);
            r.o_bigint = (long)_reader.GetValue(4);
            r.o_real = (float)_reader.GetValue(5);
            r.o_float = (double)_reader.GetValue(6);
            r.o_money = (Decimal)_reader.GetValue(7);
            r.o_decimal = (Decimal)_reader.GetValue(8);
            r.o_smalldatetime = (DateTime)_reader.GetValue(9);
            r.o_date = (DateTime)_reader.GetValue(10);
            r.o_datetime = (DateTime)_reader.GetValue(11);
            r.o_datetimeoffset = (DateTimeOffset)_reader.GetValue(12);
            r.o_time = (TimeSpan)_reader.GetValue(13);
            r.o_nchar = (string)_reader.GetValue(14);
            r.o_nvarchar = (string)_reader.GetValue(15);
            r.o_binary = (byte[])_reader.GetValue(16);
            r.o_varbinary = (byte[])_reader.GetValue(17);
            r.o_uniqueidentifier = (Guid)_reader.GetValue(18);
            return r;
        }

        public async Task<List<Row>> FetchAllRowsAndDisposeAsync()
        {
            var rows = new List<Row>();
            while (true)
            {
                var row = await NextAsync();
                if (row == null) break;
                rows.Add(row);
            }
            Dispose();
            return rows;
        }

        public async Task<List<T>> FetchAllRowsAndDisposeAsync<T>(Func<Row, T> selector)
        {
            var rows = new List<T>();
            while (true)
            {
                var row = await NextAsync();
                if (row == null) break;
                rows.Add(selector(row));
            }
            Dispose();
            return rows;
        }

        public void Dispose()
        {
            _reader.Dispose();
        }
    }

    public class DrInt : IDisposable
    {
        private DbDataReader _reader;

        public DrInt(DbDataReader reader)
        {
            _reader = reader;
        }

        public class Row
        {
            public int Value;
        }

        public async Task<Row> NextAsync()
        {
            if (await _reader.ReadAsync() == false) return null;
            var r = new Row();
            r.Value = (int)_reader.GetValue(0);
            return r;
        }

        public async Task<List<Row>> FetchAllRowsAndDisposeAsync()
        {
            var rows = new List<Row>();
            while (true)
            {
                var row = await NextAsync();
                if (row == null) break;
                rows.Add(row);
            }
            Dispose();
            return rows;
        }

        public async Task<List<T>> FetchAllRowsAndDisposeAsync<T>(Func<Row, T> selector)
        {
            var rows = new List<T>();
            while (true)
            {
                var row = await NextAsync();
                if (row == null) break;
                rows.Add(selector(row));
            }
            Dispose();
            return rows;
        }

        public void Dispose()
        {
            _reader.Dispose();
        }
    }
}
